CREATE TABLE page_bookmark(
  local_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  remote_id TEXT,
  page INTEGER NOT NULL UNIQUE,
  created_at INTEGER DEFAULT (strftime('%s', 'now')) NOT NULL,
  deleted INTEGER NOT NULL DEFAULT 0,
  -- Ensure deleted is either 0 or 1
  CHECK (deleted IN (0, 1))
);

getBookmarks:
    SELECT * FROM page_bookmark WHERE deleted = 0 ORDER BY created_at DESC;

createRemoteBookmark:
    INSERT INTO page_bookmark (remote_id, page, deleted)
    VALUES (?, ?, 0);

createLocalBookmark:
    INSERT INTO page_bookmark (remote_id, page, deleted)
    VALUES (NULL, ?, 0);

addNewBookmark {
    INSERT OR IGNORE INTO page_bookmark (remote_id, page, deleted)
    VALUES (NULL, :page, 0);
    UPDATE page_bookmark SET deleted = 0 WHERE page = :page;
}

getBookmarksFor:
    SELECT * FROM page_bookmark WHERE page = ? AND deleted = 0;

-- TODO: Rename
getUnsyncedBookmarks:
    SELECT * FROM page_bookmark WHERE remote_id IS NULL OR deleted = 1 ORDER BY created_at DESC;

setDeleted:
    UPDATE page_bookmark SET deleted = 1 WHERE local_id = ?;

resetDeleted:
    UPDATE page_bookmark SET deleted = 0 WHERE local_id = ?;

-- Removes the record of a local bookmark or marks it as deleted if it's remote.
 deleteBookmark {
     DELETE FROM page_bookmark WHERE page=:page AND remote_id IS NULL;
     UPDATE page_bookmark SET deleted = 1 WHERE page=:page AND remote_id IS NOT NULL;
 }

 deleteByRemoteID:
    DELETE FROM page_bookmark WHERE remote_id=? AND remote_id IS NOT NULL;

clearLocalMutations {
    DELETE FROM page_bookmark WHERE remote_id IS NULL;
    UPDATE page_bookmark SET deleted = 0;
}

-- Returns all records for the given page, whether it's deleted or not.
getAllRecordsFor:
    SELECT * FROM page_bookmark WHERE page = ?;